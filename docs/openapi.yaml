openapi: 3.0.3
info:
  title: OpenAPI specification
  description: OpenAPI documentation for Bank_REST application
  contact:
    name: Ivan Kokoshnikov
    email: ivan.kokoshnikov@gmail.com
  version: "1.0"
servers:
  - url: http://localhost:8080/api/v1
    description: Local ENV
paths:
  /user/cards/transfer:
    post:
      tags:
        - Card management for users
      summary: Transfer money between cards
      operationId: transferMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoneyTransferRequest"
        required: true
      responses:
        "200":
          description: Success
        "400":
          description: Validation error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ValidationErrorRepresentation"
        "404":
          description: Card not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /cards/block/request:
    post:
      tags:
        - Block cards
      summary: Request for blocking card
      operationId: requestBlockCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardBlockRequestDto"
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestResponseDtoForUser"
        "400":
          description: Validation error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ValidationErrorRepresentation"
        "404":
          description: Card for block not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /cards/block/process/{block-request-id}:
    post:
      tags:
        - Block cards
      summary: Process requested for block cards
      operationId: processBlockRequest
      parameters:
        - name: block-request-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: approve
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestResponseDtoForAdmin"
        "404":
          description: Block request not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestResponseDtoForAdmin"
        "400":
          description: Already processed
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestResponseDtoForAdmin"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Create an account
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
        required: true
      responses:
        "202":
          description: Success
        "400":
          description: Validation error
          content:
            '*/*':
              schema:
                type: application/json
                $ref: "#/components/schemas/ValidationErrorRepresentation"
        "409":
          description: Already exists
          content:
            '*/*':
              schema:
                type: application/json
                $ref: "#/components/schemas/BasicErrorRepresentation"
  /auth/authenticate:
    post:
      tags:
        - Authentication
      summary: Get JWT token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "400":
          description: Validation error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ValidationErrorRepresentation"
        "401":
          description: Bad credentials
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
  /admin/cards:
    post:
      tags:
        - Card management for admins
      summary: Create card for user
      operationId: createCardForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateUpdateRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDtoForAdmin"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "400":
          description: Validation error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ValidationErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /admin/cards/deposit:
    post:
      tags:
        - Card management for admins
      summary: Deposit money on users card
      operationId: depositMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoneyDepositRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDtoForAdmin"
        "404":
          description: Provided card not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "400":
          description: Deposit not allowed
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /admin/cards/change-status/{card-id}:
    patch:
      tags:
        - Card management for admins
      summary: Change user cards status
      operationId: changeCardStatus
      parameters:
        - name: card-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDtoForAdmin"
        "404":
          description: Card not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "400":
          description: Invalid parameter
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /user/cards:
    get:
      tags:
        - Card management for users
      summary: Search cards by status or last4 numbers
      operationId: searchCards
      parameters:
        - name: last4
          in: query
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDtoForUser"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /cards/block/pending-block-requests:
    get:
      tags:
        - Block cards
      summary: Get all requested for block cards
      operationId: getPendingBlockRequests
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardBlockRequestResponseDtoForAdmin"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /cards/block/my-requests:
    get:
      tags:
        - Block cards
      summary: Get users requested for block cards
      operationId: getUsersRequestsForBlockCard
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardBlockRequestResponseDtoForUser"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /admin/users:
    get:
      tags:
        - User management
      summary: Search users
      operationId: searchUser
      parameters:
        - name: query
          in: query
          description: "Email, first name or last name"
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageUserSummaryDtoForAdmin"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /admin/users/{user-id}:
    get:
      tags:
        - User management
      summary: Get full user with cards by id
      operationId: getUserWithCardsById
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /admin/cards/{card-id}:
    delete:
      tags:
        - Card management for admins
      summary: Delete users card
      operationId: deleteCard
      parameters:
        - name: card-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
        "400":
          description: Delete not allowed
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BasicErrorRepresentation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
components:
  schemas:
    ValidationErrorRepresentation:
      type: object
      properties:
        fieldErrors:
          type: object
          additionalProperties:
            type: string
    BasicErrorRepresentation:
      type: object
      properties:
        error:
          type: string
    MoneyTransferRequest:
      type: object
      properties:
        sourceCardId:
          type: integer
          format: int64
        targetCardId:
          type: integer
          format: int64
        amount:
          type: number
    CardBlockRequestDto:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        reason:
          type: string
          minLength: 1
      required:
        - cardId
        - reason
    CardBlockRequestResponseDtoForUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardDtoForUser:
          $ref: "#/components/schemas/CardDtoForUser"
        reason:
          type: string
        requestedAt:
          type: string
          format: date-time
        processed:
          type: boolean
        approved:
          type: boolean
    CardDtoForUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        hiddenNumber:
          type: string
        expirationDate:
          type: string
        moneyAmount:
          type: number
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
    CardBlockRequestResponseDtoForAdmin:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userDto:
          $ref: "#/components/schemas/UserSummaryDtoForAdmin"
        cardDtoForAdmin:
          $ref: "#/components/schemas/CardDtoForAdmin"
        reason:
          type: string
        requestedAt:
          type: string
          format: date-time
        processed:
          type: boolean
        approved:
          type: boolean
    CardDtoForAdmin:
      type: object
      properties:
        id:
          type: integer
          format: int64
        hiddenNumber:
          type: string
        userId:
          type: integer
          format: int64
        expirationDate:
          type: string
        moneyAmount:
          type: number
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
    UserSummaryDtoForAdmin:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    RegistrationRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
      required:
        - email
        - firstName
        - lastName
        - password
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - email
        - password
    AuthenticationResponse:
      type: object
      properties:
        jwtToken:
          type: string
    CardCreateUpdateRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
      required:
        - userId
    MoneyDepositRequest:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        moneyAmount:
          type: number
      required:
        - cardId
        - moneyAmount
    PageCardDtoForUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardDtoForUser"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    PageCardBlockRequestResponseDtoForAdmin:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardBlockRequestResponseDtoForAdmin"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageUserSummaryDtoForAdmin:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserSummaryDtoForAdmin"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum:
            - USER
            - ADMIN
        cards:
          type: array
          items:
            $ref: "#/components/schemas/CardDtoForAdmin"
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT auth description
      scheme: bearer
      bearerFormat: JWT
